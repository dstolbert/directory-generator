// Code generated by mockery v2.39.1. DO NOT EDIT.

package pdfcontroller_mocks

import mock "github.com/stretchr/testify/mock"

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

type Controller_Expecter struct {
	mock *mock.Mock
}

func (_m *Controller) EXPECT() *Controller_Expecter {
	return &Controller_Expecter{mock: &_m.Mock}
}

// SavePDF provides a mock function with given fields:
func (_m *Controller) SavePDF() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SavePDF")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Controller_SavePDF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePDF'
type Controller_SavePDF_Call struct {
	*mock.Call
}

// SavePDF is a helper method to define mock.On call
func (_e *Controller_Expecter) SavePDF() *Controller_SavePDF_Call {
	return &Controller_SavePDF_Call{Call: _e.mock.On("SavePDF")}
}

func (_c *Controller_SavePDF_Call) Run(run func()) *Controller_SavePDF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Controller_SavePDF_Call) Return(_a0 error) *Controller_SavePDF_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Controller_SavePDF_Call) RunAndReturn(run func() error) *Controller_SavePDF_Call {
	_c.Call.Return(run)
	return _c
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewController(t interface {
	mock.TestingT
	Cleanup(func())
}) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code below was generated by components. DO NOT EDIT.
// Component version: v0.1.0

type Controller_ExpecterChain[M any] func(*M) *Controller_Expecter

func Create_Controller_ExpecterChain[M any](fetch func(*M) *Controller) Controller_ExpecterChain[M] {
	return func(m *M) *Controller_Expecter {
		c := fetch(m)
		return c.EXPECT()
	}
}

type Controller_SavePDFChain[M any] func(*M) *Controller_SavePDF_Call

func (_c Controller_ExpecterChain[M]) SavePDF() Controller_SavePDFChain[M] {
	return func(m *M) *Controller_SavePDF_Call {
		expecter := _c(m)
		return expecter.SavePDF()
	}
}

func (_c Controller_SavePDFChain[M]) Run(run func()) Controller_SavePDFChain[M] {
	return func(m *M) *Controller_SavePDF_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Controller_SavePDFChain[M]) Return(_a0 error) Controller_SavePDFChain[M] {
	return func(m *M) *Controller_SavePDF_Call {
		call := _c(m)
		return call.Return(_a0)
	}
}

func (_c Controller_SavePDFChain[M]) RunAndReturn(run func() error) Controller_SavePDFChain[M] {
	return func(m *M) *Controller_SavePDF_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Controller_ExpecterChain[M]) SavePDF_Pointer() Controller_SavePDFChain[M] {
	return func(m *M) *Controller_SavePDF_Call {
		expecter := _c(m)
		return expecter.SavePDF()
	}
}

func (_c Controller_SavePDFChain[M]) Return_Pointer(_a0 *error) Controller_SavePDFChain[M] {
	return func(m *M) *Controller_SavePDF_Call {
		call := _c(m)
		return call.Return(*_a0)
	}
}
